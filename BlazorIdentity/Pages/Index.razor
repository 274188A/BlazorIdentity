@page "/"
@page "/Index/{message}"

@using Microsoft.AspNetCore.Components.Authorization
@using BlazorIdentity.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<BlazorIdentityUser> _userManager
@inject SignInManager<BlazorIdentityUser> _signInManager

<button @onclick="@LogUsername">Write user info to console</button>
<p>@message</p>

<NavLink class="nav-link" href="Register">
    <span class="oi oi-plus" aria-hidden="true"></span> Register
</NavLink>

<NavLink class="nav-link" href="RegisterConfirmation/test4@example.com">
    <span class="oi oi-plus" aria-hidden="true"></span> Confirmation
</NavLink>

<button @onclick="@Login">Login</button>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
        <p>You can only see this content if you're authenticated.</p>
    </Authorized>
    <NotAuthorized>
        <h1>Please Login</h1>
    </NotAuthorized>
</AuthorizeView>

<AuthorizeView Roles="admin">
    <p>You can see this because you are an admin</p>
</AuthorizeView>

<AuthorizeView Roles="member">
    <p>You can see this because you are a member</p>
</AuthorizeView>

<AuthorizeView Roles="users">
    <p>You can see this because you are a user</p>
</AuthorizeView>

@code {
    [Parameter] public string message { get; set; } = "None";

    private async Task LogUsername()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            message = $"{user.Identity.Name} is authenticated.";
        }
        else
        {
            message = "The user is NOT authenticated.";
        }
    }

    private async Task Login()
    {
        try
        {
            var result = await _signInManager.PasswordSignInAsync("admin@example.com", "P@ssword1234", false, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                return;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("ex={0}", ex);
        }
    }
}