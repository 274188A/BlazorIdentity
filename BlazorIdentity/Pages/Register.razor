@page "/Register"
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorIdentity.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity.UI.Services
@using MvcRouteData = Microsoft.AspNetCore.Routing;
@using Microsoft.AspNetCore.Mvc.Routing;
@using Microsoft.AspNetCore.Mvc.Abstractions;
@using BlazorIdentity.Data;

@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<BlazorIdentityUser> _userManager
@inject SignInManager<BlazorIdentityUser> _signInManager
@inject IEmailSender _emailSender;
@inject NavigationManager navman;

<h1>Register</h1>
<h4>Create a new account.</h4>

<EditForm Model="@dRegister" OnValidSubmit="@RegisterUser">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <hr />
    <div class="form-group">
        <label for="username">User Name</label>
        <InputText id="username" @bind-Value="dRegister.UserName" />
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="dRegister.Email" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" @bind-Value="dRegister.Password" />
    </div>
    <div class="form-group">
        <label for="confirmpassword">Confirm Password</label>
        <InputText id="confirmpassword" type="password" @bind-Value="dRegister.ConfirmPassword" />
    </div>
    <input type="submit" class="btn btn-primary" value="Create account"/>
</EditForm>

@*@section Scripts {
        <partial name="_ValidationScriptsPartial" />
    }*@


@code {
    private string message { get; set; } = "None";
    public string ReturnUrl { get; set; } = string.Empty;

    [Inject] protected IUrlHelperFactory UrlHelperFactory { get; set; }
    [Inject] protected IHttpContextAccessor HttpContextAccessor { get; set; }

    DataRegister dRegister { get; set; } = new DataRegister();


    private async Task RegisterUser(EditContext editContext)
    {
        var urlHelper = UrlHelperFactory.GetUrlHelper(
                new ActionContext(HttpContextAccessor.HttpContext,
                new MvcRouteData.RouteData(HttpContextAccessor.HttpContext.Request.RouteValues),
                new ActionDescriptor()));
        var returnUrl = ReturnUrl ?? urlHelper.Content("~/");

        //TODO: Remove hard coding.
        var user = new BlazorIdentityUser { UserName = "test4", Email = "test4@example.com" };
        var result = await _userManager.CreateAsync(user, "P@ssword1234");

        if (!result.Succeeded)
        {
            return; //TODO: Error this
        }

        
        var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        //TODO: Validate this is correct.
        var callbackUrl = urlHelper.Page(
            "/ConfirmEmail"
            //pageHandler: null,
            //values: new { },
            ////values: new { area="Identity", userId = user.Id, code = code },
            //protocol: "https"
            );

        //TODO: Remove hard coded values
        await _emailSender.SendEmailAsync("test4@example.com", "Confirm your email",
            $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

        if (_userManager.Options.SignIn.RequireConfirmedAccount)
        {
            //TODO: Remove hard coded values
            navman.NavigateTo("RegisterConfirmation/" + "test4@example.com");
            //return RedirectToPage("RegisterConfirmation", new { email = Input.Email });
        }
        else
        {
            await _signInManager.SignInAsync(user, isPersistent: false);
            navman.NavigateTo(returnUrl);
        }
    }
}
