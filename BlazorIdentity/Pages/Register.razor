@page "/Register"
@using Microsoft.AspNetCore.Components.Authorization
@using BlazorIdentity.Areas.Identity.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Mvc.RazorPages
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity.UI.Services
@using MvcRouteData = Microsoft.AspNetCore.Routing;
@using Microsoft.AspNetCore.Mvc.Routing;
@using Microsoft.AspNetCore.Mvc.Abstractions;
@using BlazorIdentity.Data;
@using BlazorIdentity.Helpers; 
@using Microsoft.AspNetCore.Routing; 
@using BlazorIdentity.Extensions; 

@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<BlazorIdentityUser> _userManager
@inject SignInManager<BlazorIdentityUser> _signInManager
@inject IEmailSender _emailSender;
@inject NavigationManager navman;

<h1>Register</h1>
<h4>Create a new account.</h4>

<EditForm Model="@dRegister" OnValidSubmit="@RegisterUser">
    <DataAnnotationsValidator />
    <ServerSideValidator @ref="serverSideValidator"  />
    <hr />
    <div class="form-group row ">
        <label class="col-md-3 text-right" for="username">User Name:</label>        
        <div class="col-md-5">
            <InputText id="username" @bind-Value="dRegister.UserName" />
            <ValidationMessage For="@(() => dRegister.UserName)" />
        </div>    
    </div>
    <div class="form-group row">
        <label class="col-md-3 text-right" for="email">Email:</label>
        <div class="col-md-5">
            <InputText id="email" @bind-Value="dRegister.Email" />
            <ValidationMessage For="@(() => dRegister.Email)" />
        </div>
    </div>
    <div class="form-group row ">
        <label class="col-md-3 text-right" for="password">Password:</label>
        <div class="col-md-5">
            <InputText id="password" type="password" @bind-Value="dRegister.Password" />
            <ValidationMessage For="@(() => dRegister.Password)" />
        </div>
    </div>
    <div class="form-group row">
        <label class="col-md-3 text-right" for="confirmpassword">Confirm Password:</label>
        <div class="col-md-5">
            <InputText id="confirmpassword" type="password" @bind-Value="dRegister.ConfirmPassword" />
            <ValidationMessage For="@(() => dRegister.ConfirmPassword)" />
        </div>
    </div>
    <div class="col-md-8 text-center">
        <input type="submit" class="btn btn-primary align-content-center" value="Create account"/>
    </div>
</EditForm>

@code {
    //TODO: Make sure this is being used correctly
    public string ReturnUrl { get; set; } = string.Empty;
    private EditContext _editContext;
    /// <summary>
    /// Factory to generate urlHelper object.  Used to create returnUrl and confirmation email callbackUrl.
    /// Theoretically, this can be replaced with LinkGenerator Service, but so far can't get the syntax right.
    /// </summary>
    [Inject] protected IUrlHelperFactory UrlHelperFactory { get; set; }

    /// <summary>
    /// Used to get the HttpContext object
    /// </summary>
    [Inject] protected IHttpContextAccessor HttpContextAccessor { get; set; }

    /// <summary>
    /// Data Register object for new user
    /// </summary>
    DataRegister dRegister { get; set; } = new DataRegister();

    /// <summary>
    /// Object to process a dictionary of errors per field and display them on form
    /// </summary>
    public ServerSideValidator serverSideValidator;

    protected override void OnInitialized()
    {
        _editContext = new EditContext(dRegister);

        base.OnInitialized();
    }

    /// <summary>
    /// Invoked by <EditForm> when submit button is clicked.
    /// </summary>
    /// <returns></returns>
    private async Task RegisterUser()
    {
        var httpContext = HttpContextAccessor.HttpContext;
        var actionDescriptor = new ActionDescriptor();
        var routeValues = httpContext.Request.RouteValues;
        var routeData = new MvcRouteData.RouteData(routeValues);

        var actionContext = new ActionContext(httpContext, routeData, actionDescriptor);
        var urlHelper = UrlHelperFactory.GetUrlHelper(actionContext);
        var returnUrl = ReturnUrl ?? urlHelper.Content("~/");

        // BlazorIdenityUser is this project's IdentityUser class.
        var user = new BlazorIdentityUser { UserName = dRegister.UserName, Email = dRegister.Email };
        // Actually writing the user details to database
        var result = await _userManager.CreateAsync(user, dRegister.Password);

        if (!result.Succeeded)
        {   // Failed writing to database.  Create local dictionary of errors.
            Dictionary<string, List<string>> errors = new Dictionary<string, List<string>>();
            //Todo: Figure out how to make this generic
            List<string> userName = new List<string>();
            List<string> email = new List<string>();
            List<string> password = new List<string>();
            ((from kp in result.Errors
              select kp).ToList()).ForEach(kp =>
              {
                  if (kp.Code.Equals("DuplicateUserName"))
                      userName.Add(kp.Description);
                  if (kp.Code.Equals("PasswordRequiresNonAlphanumeric"))
                      password.Add(kp.Description);
                  if (kp.Code.Equals("PasswordRequiresLower"))
                      password.Add(kp.Description);
                  if (kp.Code.Equals("PasswordRequiresUpper"))
                      password.Add(kp.Description);
              });

            errors.Add("UserName", userName);
            errors.Add("Email", email);
            errors.Add("Password", password);

            // The <EditForm> is valid, but the transaction failed for some reason.
            // This is NOT a form validation error, One common case is the user already exists, and results. Errors contains
            // Code and Description.  ServerSideValidator is expecting a field name and error message.
            // This doesn't naturally line up.  So, while scanning the list of errors--which only 
            // has one in this case--doing a check for a Code="DuplicateUserName".
            // If true, then add an entry to the errors dictionary, with a key value of field
            // "UserName" and then the description.  

            serverSideValidator.DisplayErrors(errors);
            return;
        }


        var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = urlHelper.EmailConfirmationLink(user.Id, code, httpContext.Request.Scheme);

        await _emailSender.SendEmailAsync(dRegister.Email, "Confirm your email",
            $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

        if (_userManager.Options.SignIn.RequireConfirmedAccount)
        {
            navman.NavigateTo("RegisterConfirmation/" + dRegister.Email);
            //return RedirectToPage("RegisterConfirmation", new { email = Input.Email });
        }
        else
        {
            await _signInManager.SignInAsync(user, isPersistent: false);
            navman.NavigateTo(returnUrl);
        }
    }

}
